{"version":3,"sources":["utils.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["getData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","params","onSuccess","onError","data","wrap","_context","prev","next","fetch","then","response","json","catch","_ref2","message","sent","stop","this","_x","_x2","_x3","apply","arguments","App","_useState","useState","_useState2","slicedToArray","city","setCity","_useState3","_useState4","setData","_useState5","_useState6","error","setError","react_default","createElement","Fragment","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","keys","length","cod","name","sys","coord","weather","main","wind","country","lat","lon","map","item","i","key","src","concat","icon","alt","description","temp","temp_max","temp_min","humidity","pressure","speed","deg","renderData","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea5b9870.chunk.js","sourcesContent":["import { BASE, APP_ID } from './constants';\n\nexport const getData = async (params, onSuccess, onError) => {\n\tconst data = await fetch(BASE + params + APP_ID)\n\t\t.then(response => response.json())\n\t\t.catch(({ message }) => onError(message));\n\n\tonSuccess(data);\n};\n","export const BASE = 'https://api.openweathermap.org/data/2.5/weather?q=';\nexport const APP_ID = '&units=metric&appid=ac4bbd3c23dc38c5831469c1976a79ff';\nexport const IMG_EXT = '.png';\nexport const IMG_BASE = '//openweathermap.org/img/w/';\n","import React, { useState } from 'react';\n\nimport { getData } from './utils';\nimport { IMG_EXT, IMG_BASE } from './constants';\n\nconst App = () => {\n\tconst [city, setCity] = useState('');\n\tconst [data, setData] = useState({});\n\tconst [error, setError] = useState('');\n\n\tconst renderData = data => {\n\t\tif (!Object.keys(data).length) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (data.cod !== 200) {\n\t\t\treturn <h2>{data.message}</h2>;\n\t\t}\n\n\t\tconst { name, sys, coord, weather, main, wind } = data;\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<h2>\n\t\t\t\t\t{name}, {sys.country}\n\t\t\t\t</h2>\n\n\t\t\t\t<table>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Coordinates:</td>\n\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t[{coord.lat}, {coord.lon}]\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t{weather.map((item, i) => (\n\t\t\t\t\t\t\t<tr key={i}>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={`${IMG_BASE}${\n\t\t\t\t\t\t\t\t\t\t\titem.icon\n\t\t\t\t\t\t\t\t\t\t}${IMG_EXT}`}\n\t\t\t\t\t\t\t\t\t\talt={item.description}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t\t<td>{item.main}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Current temp:</td>\n\n\t\t\t\t\t\t\t<td>{main.temp}&deg; C</td>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Maximum temp:</td>\n\n\t\t\t\t\t\t\t<td>{main.temp_max}&deg; C</td>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Minimum temp:</td>\n\n\t\t\t\t\t\t\t<td>{main.temp_min}&deg; C</td>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Humidity:</td>\n\n\t\t\t\t\t\t\t<td>{main.humidity} %</td>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Pressure:</td>\n\n\t\t\t\t\t\t\t<td>{main.pressure} hpa</td>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Wind speed:</td>\n\n\t\t\t\t\t\t\t<td>{wind.speed} m/s</td>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Wind direction:</td>\n\n\t\t\t\t\t\t\t<td>{data.wind.deg}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</React.Fragment>\n\t\t);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<form\n\t\t\t\tonSubmit={e => {\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\tif (!city) {\n\t\t\t\t\t\tsetError('Please type a city.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetError('');\n\t\t\t\t\tgetData(city, setData, setError);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Type a city...\"\n\t\t\t\t\tvalue={city}\n\t\t\t\t\tonChange={e => setCity(e.target.value)}\n\t\t\t\t/>\n\n\t\t\t\t<button type=\"submit\">Go</button>\n\t\t\t</form>\n\n\t\t\t{renderData(data)}\n\n\t\t\t{error && <h3>{error}</h3>}\n\t\t</React.Fragment>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}