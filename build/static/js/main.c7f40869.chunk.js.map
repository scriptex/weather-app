{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","base","appId","imgExt","imgBase","state","city","data","error","getData","_callee","params","regenerator_default","a","wrap","_context","prev","next","fetch","_this","then","response","json","catch","onError","sent","console","log","setState","stop","this","onSubmit","e","preventDefault","onSuccess","position","_position$coords","coords","latitude","longitude","concat","temp","kelvin","Math","round","time","date","dateObj","Date","hours","getHours","minutes","getMinutes","componentDidMount","navigator","geolocation","getCurrentPosition","renderData","Object","keys","length","cod","react_default","createElement","message","name","sys","coord","weather","main","wind","Fragment","country","lat","lon","map","item","i","key","src","icon","alt","description","sunrise","sunset","temp_max","temp_min","humidity","pressure","speed","deg","_this2","_this$state","type","placeholder","value","onChange","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7f40869.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n\tbase = 'https://api.openweathermap.org/data/2.5/weather?q=';\n\tappId = '&units=metric&appid=ac4bbd3c23dc38c5831469c1976a79ff';\n\timgExt = '.png';\n\timgBase = '//openweathermap.org/img/w/';\n\n\tstate = {\n\t\tcity: '',\n\t\tdata: {},\n\t\terror: ''\n\t};\n\n\tgetData = async params => {\n\t\tconst data = await fetch(this.base + params + this.appId)\n\t\t\t.then(response => response.json())\n\t\t\t.catch(this.onError);\n\n\t\tconsole.log(data);\n\n\t\tthis.setState({ data });\n\t};\n\n\tonSubmit = e => {\n\t\te.preventDefault();\n\n\t\tconst params = this.state.city;\n\n\t\tif (!params) {\n\t\t\tthis.setState({\n\t\t\t\terror: 'Please type a city'\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState({\n\t\t\terror: ''\n\t\t});\n\n\t\tthis.getData(params);\n\t};\n\n\tonSuccess = position => {\n\t\tconst { latitude, longitude } = position.coords;\n\t\tconst params = `?lat=${latitude}&lon=${longitude}`;\n\n\t\tthis.getData(params);\n\t};\n\n\tonError = e => {\n\t\tconst error = typeof e === 'string' ? e : '';\n\n\t\tthis.setState({\n\t\t\terror\n\t\t});\n\t};\n\n\ttemp = kelvin => Math.round(kelvin - 273.15);\n\n\ttime = date => {\n\t\tconst dateObj = new Date(Date(date));\n\t\tconst hours = dateObj.getHours();\n\t\tconst minutes = dateObj.getMinutes();\n\n\t\treturn `${hours}:${minutes}`;\n\t};\n\n\tcomponentDidMount = () => {\n\t\tnavigator.geolocation &&\n\t\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\t\tthis.onSuccess,\n\t\t\t\tthis.onError\n\t\t\t);\n\t};\n\n\trenderData = data => {\n\t\tif (!Object.keys(data).length) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (data.cod !== 200) {\n\t\t\treturn <h2>{data.message}</h2>;\n\t\t}\n\n\t\tconst { name, sys, coord, weather, main, wind } = data;\n\n\t\t// TODO: convert wind props to human readable strings\n\t\t// https://www.windfinder.com/wind/windspeed.htm\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<h2>\n\t\t\t\t\t{name}, {sys.country}\n\t\t\t\t</h2>\n\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Coordinates:</td>\n\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t[{coord.lat}, {coord.lon}]\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t{weather.map((item, i) => (\n\t\t\t\t\t\t<tr key={i}>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tsrc={`${this.imgBase}${item.icon}${\n\t\t\t\t\t\t\t\t\t\tthis.imgExt\n\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\talt={item.description}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t<td>{item.main}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t))}\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sunrise:</td>\n\n\t\t\t\t\t\t<td>{this.time(sys.sunrise)}</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Sunset:</td>\n\n\t\t\t\t\t\t<td>{this.time(sys.sunset)}</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Current temp:</td>\n\n\t\t\t\t\t\t<td>{main.temp}&deg; C</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Maximum temp:</td>\n\n\t\t\t\t\t\t<td>{main.temp_max}&deg; C</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Minimum temp:</td>\n\n\t\t\t\t\t\t<td>{main.temp_min}&deg; C</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Humidity:</td>\n\n\t\t\t\t\t\t<td>{main.humidity} %</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Pressure:</td>\n\n\t\t\t\t\t\t<td>{main.pressure} hpa</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Wind speed:</td>\n\n\t\t\t\t\t\t<td>{wind.speed} m/s</td>\n\t\t\t\t\t</tr>\n\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Wind direction:</td>\n\n\t\t\t\t\t\t<td>{data.wind.deg}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</React.Fragment>\n\t\t);\n\t};\n\n\trender() {\n\t\tconst { city, data, error } = this.state;\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<form onSubmit={this.onSubmit}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Type a city...\"\n\t\t\t\t\t\tvalue={city}\n\t\t\t\t\t\tonChange={e => this.setState({ city: e.target.value })}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<button type=\"submit\">Go</button>\n\t\t\t\t</form>\n\n\t\t\t\t{this.renderData(data)}\n\n\t\t\t\t{error && <h3>{error}</h3>}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}